#!/bin/bash -e

INSTALL='sudo pacman -S --needed --noconfirm'

DIR=$(readlink -f $(dirname $0))

# Pacman configuration
PACMAN_CONF=/etc/pacman.conf
if ! diff -q $PACMAN_CONF $DIR/etc/pacman.conf >/dev/null
then
	sudo install $DIR/etc/pacman.conf $PACMAN_CONF

	sudo rm -r /etc/pacman.d/gnupg
	sudo pacman-key --init
	sudo pacman-key --populate archlinux

	# Infinality key
	sudo pacman-key -r AE6866C7962DDE58
	sudo pacman-key --lsign AE6866C7962DDE58

	sudo pacman -Sy
fi

# Install pacaur from AUR manually
if ! which pacaur >/dev/null 2>&1
then
	function aur_install () {
		PACKAGE=$1
		TMPDIR=$(mktemp -d)
		trap "rm -rf $TMPDIR" EXIT
		curl -s https://aur.archlinux.org/cgit/aur.git/snapshot/$PACKAGE.tar.gz | \
			tar xz -C $TMPDIR
		pushd $TMPDIR/$PACKAGE >/dev/null
		makepkg
		sudo pacman -U --noconfirm $PACKAGE-*.pkg.tar.xz
		popd >/dev/null
	}

	$INSTALL wget base-devel abs

	$INSTALL expac
	aur_install cower
	aur_install pacaur

	# AUR package keys
	gpg --recv-keys 702353E0F7E48EDB  # ncurses5-compat-libs
	gpg --recv-keys 1EB2638FF56C0C53  # pacaur/cower
fi

INSTALL='pacaur -S --needed --noconfirm'
AUR_INSTALL='pacaur -S --needed --noconfirm'
STACK_INSTALL='stack install'
PIP_INSTALL='pip install --user'

# Packages
# Files in packages/ may contain Bash brace expansions

$INSTALL $(bash -c "echo $(echo $(cat $DIR/packages/* | grep -v '^[a-z]\+:'))")

# gcc-multilib conflicts with gcc
yes | sudo pacman -S --needed gcc-multilib
$AUR_INSTALL $(bash -c "echo $(echo $(cat $DIR/packages/* | sed '/^aur:/!d;s/^aur://g'))")

ln -sfnT $DIR/dotfiles/stack $HOME/.stack
stack setup
$STACK_INSTALL $(bash -c "echo $(echo $(cat $DIR/packages/* | sed '/^stack:/!d;s/^stack://g'))")

$INSTALL python-pip
$PIP_INSTALL $(bash -c "echo $(echo $(cat $DIR/packages/* | sed '/^pip:/!d;s/^pip://g'))")

# Shell
if [ $(getent passwd $USER | cut -d: -f7) != "/bin/zsh" ]
then
	chsh -s /bin/zsh
fi

# TLP
sudo install $DIR/etc/default/tlp /etc/default/tlp

./makelinks

# Systemd
ls config/systemd/user/*.service | xargs -n 1 basename | xargs systemctl --user enable

# XMonad and Tianbar config
$HOME/bin/xmonad --recompile
cd $DIR/config/tianbar
npm install
./node_modules/.bin/bower install
cd - >/dev/null

for conf in $DIR/dconf/*.dconf
do
	confpath=$(echo $conf | sed -E 's!.+/!!;s!\.!/!g;s!dconf$!!;s!^!/!')
	dconf load $confpath < $conf
done
