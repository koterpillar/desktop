# https://github.com/alacritty/alacritty/releases/download/v0.4.1/alacritty.yml

window:
  padding:
    x: 2
    y: 2
  dynamic_padding: true

  decorations: none

font:
  normal:
    family: "Fira Mono"
  bold:
    family: "Fira Mono"
  italic:
    family: "Fira Mono"

  size: 11

colors:
  primary:
    background: '0xffffff'
    foreground: '0x4d4d4c'

  cursor:
    text: '0xffffff'
    cursor: '0x4c4c4c'

  normal:
    black:   '0x000000'
    red:     '0xC82828'
    green:   '0x718C00'
    yellow:  '0xEAB700'
    blue:    '0x4171AE'
    magenta: '0x8959A8'
    cyan:    '0x3E999F'
    white:   '0xFFFEFE'

  bright:
    black:   '0x000000'
    red:     '0xC82828'
    green:   '0x708B00'
    yellow:  '0xE9B600'
    blue:    '0x4170AE'
    magenta: '0x8958A7'
    cyan:    '0x3D999F'
    white:   '0xFFFEFE'

# Live config reload (changes require restart)
#live_config_reload: true

dynamic_title: true

shell:
  program: /usr/bin/env
  args:
    - tmux
    - new
    - -A
    - -s
    - alacritty

mouse:
  #hide_when_typing: false

  url:
    modifiers: Control

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
key_bindings:
  - { key: V,        mods: Control|Shift, action: Paste            }
  - { key: C,        mods: Control|Shift, action: Copy             }
  - { key: Insert,   mods: Shift,         action: ReceiveChar      }
  - { key: Key0,     mods: Control,       action: ResetFontSize    }
  - { key: Equals,   mods: Control,       action: IncreaseFontSize }
  - { key: Add,      mods: Control,       action: IncreaseFontSize }
  - { key: Subtract, mods: Control,       action: DecreaseFontSize }
  - { key: Minus,    mods: Control,       action: DecreaseFontSize }

  # Disable macOS keybindings
  - { key: Key0,   mods: Command,         action: ReceiveChar      }
  - { key: Equals, mods: Command,         action: ReceiveChar      }
  - { key: Add,    mods: Command,         action: ReceiveChar      }
  - { key: Minus,  mods: Command,         action: ReceiveChar      }
  - { key: K,      mods: Command,         action: ReceiveChar      }
  - { key: K,      mods: Command,         action: ReceiveChar      }
  - { key: V,      mods: Command,         action: ReceiveChar      }
  - { key: C,      mods: Command,         action: ReceiveChar      }
  - { key: H,      mods: Command,         action: ReceiveChar      }
  - { key: M,      mods: Command,         action: ReceiveChar      }
  - { key: Q,      mods: Command,         action: ReceiveChar      }
  - { key: W,      mods: Command,         action: ReceiveChar      }
  - { key: F,      mods: Command|Control, action: ReceiveChar      }

  #- { key: Paste,                    action: Paste                            }
  #- { key: Copy,                     action: Copy                             }
  #- { key: L,         mods: Control, action: ClearLogNotice                   }
  #- { key: L,         mods: Control, chars: "\x0c"                            }
  #- { key: PageUp,    mods: Shift,   action: ScrollPageUp,   mode: ~Alt       }
  #- { key: PageDown,  mods: Shift,   action: ScrollPageDown, mode: ~Alt       }
  #- { key: Home,      mods: Shift,   action: ScrollToTop,    mode: ~Alt       }
  #- { key: End,       mods: Shift,   action: ScrollToBottom, mode: ~Alt       }
