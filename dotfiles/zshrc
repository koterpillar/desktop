HISTFILE=$HOME/.histfile
HISTSIZE=10000
SAVEHIST=10000
setopt share_history nomatch hist_ignore_all_dups hist_ignore_space
unsetopt autocd
WORDCHARS=${WORDCHARS//[\/-]}

DESKTOP_PATH=$(dirname $(dirname $(realpath ${(%):-%x})))

zstyle ':completion:*' matcher-list 'r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' menu yes select
setopt complete_in_word
autoload -Uz compinit
compinit -u
autoload -Uz bashcompinit
bashcompinit

bindkey -e

# X terminal keys
bindkey '^[[1;5D' vi-backward-word
bindkey '^[[1;5C' vi-forward-word
bindkey '^[OF' vi-end-of-line
bindkey '^[OH' vi-beginning-of-line
bindkey '^[[3~' delete-char
bindkey '^[[3;5~' delete-word

# Non-X terminal keys, where different
# bindkey '^[[D' vi-backward-word  # FIXME: this is normal left arrow on macOS
# bindkey '^[[C' vi-forward-word  # FIXME: this is normal right arrow on macOS
bindkey '^[[4~' vi-end-of-line
bindkey '^[[1~' vi-beginning-of-line

# macOS terminal keys, where different
bindkey '^[^[[D' vi-backward-word
bindkey '^[^[[C' vi-forward-word
bindkey '^[[H' beginning-of-line  # FIXME: same on X?
bindkey '^[[F' end-of-line  # FIXME: same on X?

# Edit the command line with Ctrl-V
autoload edit-command-line
zle -N edit-command-line
bindkey '^V' edit-command-line

bindkey '^I' expand-or-complete-prefix

# Handy and pretty aliases
command_exists() {
    type "$1" >/dev/null 2>&1
}

alias grep='grep --color=auto'

if command_exists eza
then
    alias ls=eza
elif command_exists gls
then
    alias ls='gls --color=auto'
else
    alias ls='ls --color=auto'
fi

if ! command_exists open
then
    alias open=xdg-open
fi

if command_exists bat
then
    alias cat=bat
fi

if command_exists unrar-free
then
    alias unrar=unrar-free
fi

# Colored man pages
# https://wiki.archlinux.org/title/Color_output_in_console#man
# https://man.archlinux.org/man/less.1#D
# https://felipec.wordpress.com/2021/06/05/adventures-with-man-color/
export MANPAGER="less -R --use-color --color=d+c --color=u+b"
export MANROFFOPT="-c"

# Plugins

source "${HOME}/.zsh-plugins/zsh-z/zsh-z.plugin.zsh"
source "${HOME}/.zsh-plugins/zsh-command-time/command-time.plugin.zsh"
source "${HOME}/.zsh-plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
source "${HOME}/.zsh-plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"

source "${HOME}/.zsh-plugins/oh-my-zsh/lib/async_prompt.zsh"
source "${HOME}/.zsh-plugins/oh-my-zsh/lib/functions.zsh"
source "${HOME}/.zsh-plugins/oh-my-zsh/lib/git.zsh"
source "${HOME}/.zsh-plugins/oh-my-zsh/lib/termsupport.zsh"
source "${HOME}/.zsh-plugins/oh-my-zsh/plugins/docker/completions/_docker"
source "${HOME}/.zsh-plugins/oh-my-zsh/plugins/git/git.plugin.zsh"
source "${HOME}/.zsh-plugins/oh-my-zsh/plugins/gradle/gradle.plugin.zsh"
source "${HOME}/.zsh-plugins/oh-my-zsh/plugins/npm/npm.plugin.zsh"
source "${HOME}/.zsh-plugins/oh-my-zsh/plugins/yarn/yarn.plugin.zsh"

# Theme
autoload -U colors
colors

if [ $UID = 0 ]
then
    PROMPT_HOST_COLOR=$fg[red]
else
    PROMPT_HOST_COLOR=$fg[green]
fi

fancy_terminal () {
    [ -z "$SSH_CLIENT" ] && [ -z "$SSH_TTY" ] && [[ ${TERM:-} = xterm-kitty ]]
}

if [ $HOST = taohua ]
then
    if [ -z "$SSH_CLIENT" ] && [ -z "$SSH_TTY" ]
    then
        PROMPT_HOST=
    else
        PROMPT_HOST=桃花
    fi
elif [ $HOST = liushu ]
then
    PROMPT_HOST=💽柳树
elif [[ $HOST =~ atlassian ]] || [[ $HOST =~ DQ94 ]]
then
    if fancy_terminal
    then
        PROMPT_HOST=$'\UEF32'
    else
        PROMPT_HOST=▲
    fi
    if [ $UID != 0 ]
    then
        # https://atlassian.design/foundations/color
        PROMPT_HOST_COLOR=$'\e[38;2;0;82;204m'
    fi
else
    PROMPT_HOST=$HOST
fi

PROMPT_BACKGROUND=
PROMPT_ARROW=' '
if fancy_terminal
then
    REDS=(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 250 248 246 244 242 240 238 235 233 231 228 226 224 223 221 220 218 217 216 215 214 213 212 211 210 209 208 207 207 206 205 205 204 203 203 202 202 201 200 200 199 199 198 198 197 197 197 196 196 195 195 194 194 194 193 193 192 192 192 191 191 191 190 190 189 189 189 188 188 188 187 187 187 186 186 186 185 185 185 184 184 184 183 183 182 182 182 181 181 181 180 180 180 179 179 178 178 178 177 177 176 176 175 175 174 174 174 173 177 181 185 188 191 193 196 198 200 202 203 205 206 208 209 210 211 212 214 214 215 216 217 218 219 219 220 221 221 222 223 223 224 224 225 225 226 226 227 227 228 228 229 229 230 230 230 231 231 232 232 232 233 233 233 234 234 234 235 235 235 236 236 236 237 237 237 238 238 238 239 239 239 239 240 240 240 241 241 241 242 242 242 243 243 243 244 244 244 244 245 245 246 246 246 247 247 247 248 248 248 249 249 250 250 250 251 251 252 252 253 253 254 254 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255)
    GREENS=(236 236 236 236 236 236 236 236 236 236 236 236 236 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 238 238 238 238 238 238 238 238 238 238 238 238 238 238 238 238 239 239 239 239 239 239 239 239 240 240 240 240 241 241 241 242 242 242 243 244 245 246 247 247 248 249 249 250 251 251 252 252 253 254 254 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 254 253 252 252 251 251 250 250 249 249 248 248 248 248 247 247 247 246 246 246 246 246 245 245 245 245 245 244 244 244 244 244 244 244 243 243 243 243 243 243 243 242 242 242 242 242 242 242 242 242 241 241 241 241 241 241 241 241 241 241 241 240 240 240 240 240 240 240 240 240 240 239 239 239 239 239 239 239 239 239 239 239 238 238 238 238 238 238 238 238 238 238 237 237 237 237 237 237 237 237 237 236 236 236 236 236 236 236 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236)
    BLUES=(239 239 239 239 238 238 238 238 237 237 237 237 237 236 236 236 236 235 235 235 235 234 234 234 233 233 233 233 232 232 232 231 231 231 230 230 230 229 229 229 228 228 227 227 226 226 225 225 224 224 223 223 222 221 221 220 219 218 217 216 215 214 213 212 210 209 207 206 204 202 199 197 194 190 186 182 176 170 161 151 137 117 83 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50 73 89 101 111 119 127 133 139 144 148 152 156 160 163 166 169 172 175 177 179 181 183 185 187 189 191 192 194 196 197 198 200 201 202 204 205 206 207 208 210 211 212 213 214 215 216 217 217 218 219 220 221 222 223 224 224 225 226 227 228 228 229 230 231 231 232 233 234 234 235 236 237 237 238 239 240 240 241 242 243 244 244 245 246 247 247 248 249 250 251 251 252 253 254 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 254 253 253 252 252 252 251 251 250 250 250 249 249 249 248 248 248 247 247 247 246 246 246 246 245 245 245 245 244 244 244 244 243 243 243 243 242 242 242 242 242 241 241 241 241 240 240 240 240 239)
    mk_prompt_color () {
        local HUE
        HUE=$((RANDOM % 360 + 1))
        printf -v PROMPT_BACKGROUND "%%{\e[48;2;%d;%d;%dm%%}" $REDS[$HUE] $GREENS[$HUE] $BLUES[$HUE]
        printf -v PROMPT_ARROW "%%{$bg[default]\e[38;2;%d;%d;%dm%%}\UE0B0" $REDS[$HUE] $GREENS[$HUE] $BLUES[$HUE]
    }
    precmd_functions+=(mk_prompt_color)
fi

setopt PROMPT_SUBST
PROMPT='\
$PROMPT_BACKGROUND%{$PROMPT_HOST_COLOR%}$PROMPT_HOST%{$fg[default]%} \
$PROMPT_PWD \
$(git_prompt_info)%{$fg[default]%}\
%{$fg[red]%}%(!.#.»)%{$fg[default]%}\
$PROMPT_ARROW%{$reset_color%}'

PROMPT2='$PROMPT_BACKGROUND%{$fg[red]%}\%{$reset_color%} '

if [ -z "$SSH_CLIENT" ] && [ -z "$SSH_TTY" ] && [ $UID != 0 ]
then
    TERM_TITLE_IDLE=""
else
    TERM_TITLE_IDLE="$PROMPT_HOST"
    if [ $UID = 0 ]
    then
        TERM_TITLE_IDLE="${TERM_TITLE_IDLE}# "
    else
        TERM_TITLE_IDLE="${TERM_TITLE_IDLE}: "
    fi
fi

DIR_DECORATIONS=("$HOME/projects" '♦' "$HOME/desktop" '🗔' "$HOME/pictures" '🖼' "$HOME/books" '🕮' "$HOME" '~')

desktop_func_join() {
    if [ -z "$1" ]
    then
        echo "$2"
    elif [ -z "$2" ]
    then
        echo "$1"
    else
        echo "$1${3:- }$2"
    fi
}

ellipsis='…'
desktop_func_ellipsis() {
    maxlength=$(($2 - ${#ellipsis}))
    if [ "${#1}" -gt "$maxlength" ]
    then
        echo "${1[0,$maxlength]}$ellipsis"
    else
        echo "$1"
    fi
}

pwd_precmd() {
    PWD_SYMBOL=''
    PWD_DIR=$PWD
    for (( i = 1; i <= $#DIR_DECORATIONS; i += 2 )) do
        THIS_DIR=$DIR_DECORATIONS[i]
        THIS_SYM=$DIR_DECORATIONS[$((i + 1))]
        case $PWD in
            ($THIS_DIR)
                PWD_SYMBOL=$THIS_SYM
                PWD_DIR=''
                break
                ;;
            ($THIS_DIR/*)
                PWD_SYMBOL=$THIS_SYM
                PWD_DIR="${PWD#$THIS_DIR/}"
                break
                ;;
        esac
    done
    PROMPT_PWD=$(desktop_func_join "$PWD_SYMBOL" "$PWD_DIR")
    TITLE_DIR=$(desktop_func_ellipsis "$PWD_DIR" 25)
    TITLE_PWD=$(desktop_func_join "$PWD_SYMBOL" "$TITLE_DIR")
    title "${TERM_TITLE_IDLE}${TITLE_PWD}"
}
precmd_functions+=(pwd_precmd)

ZSH_RECORD_EXIT_STATUS=
exit_status_preexec() {
  ZSH_RECORD_EXIT_STATUS=1
}
exit_status_precmd() {
  _EXIT_STATUS_PRECMD="$?"
  if [ -n "${ZSH_RECORD_EXIT_STATUS:-}" ]
  then
    ZSH_RECORD_EXIT_STATUS=
    if [ "$_EXIT_STATUS_PRECMD" -gt 0 ]; then
      echo "$fg[red]❌ ${_EXIT_STATUS_PRECMD}$fg[default]"
    fi
  fi
}
preexec_functions+=(exit_status_preexec)
precmd_functions+=(exit_status_precmd)

zsh_command_time() {
    if [ -n "$ZSH_COMMAND_TIME" ]; then
        min=$(($ZSH_COMMAND_TIME/60))
        sec=$(($ZSH_COMMAND_TIME%60))
        if [ "$min" -lt 60 ]; then
            timer_show=$(printf '%02d:%02d\n' $min $sec)
        else
            hours=$(($min/60))
            min=$(($min%60))
            timer_show=$(printf '%d:%02d:%02d\n' $hours $min $sec)
        fi
        echo "$fg[cyan]⌛ $timer_show$fg[default]"
    fi
}
ZSH_COMMAND_TIME_EXCLUDE=(vim nvim)

ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg[green]%}±%{$fg[yellow]%}"
ZSH_THEME_GIT_PROMPT_SUFFIX=" "
ZSH_CUSTOM_GIT_PROMPT_STAGED=%{$fg[green]%}✦
ZSH_CUSTOM_GIT_PROMPT_UNSTAGED=%{$fg[red]%}✧
ZSH_CUSTOM_GIT_PROMPT_UNTRACKED=%{$fg[yellow]%}✧

function parse_git_dirty() {
  local STATUS
  local STAGED
  local UNSTAGED
  local UNTRACKED
  STAGED=
  UNSTAGED=
  UNTRACKED=
  # https://git-scm.com/docs/git-status#_porcelain_format_version_2
  # https://unix.stackexchange.com/a/29748/11020
  for STATUS ("${(@f)$(__git_prompt_git status --porcelain=v2 2>/dev/null)}")
  do
    if [[ "$STATUS" =~ '^\?' ]]; then
      UNTRACKED=1
    else
      if [[ "$STATUS" =~ '^. [^.].' ]]; then
        STAGED=1
      fi
      if [[ "$STATUS" =~ '^. .[^.]' ]]; then
        UNSTAGED=1
      fi
    fi
  done
  if [ -n "$STAGED$UNSTAGED$UNTRACKED" ]
  then
    echo "${STAGED:+$ZSH_CUSTOM_GIT_PROMPT_STAGED}${UNSTAGED:+$ZSH_CUSTOM_GIT_PROMPT_UNSTAGED}${UNTRACKED:+$ZSH_CUSTOM_GIT_PROMPT_UNTRACKED}"
  fi
}

if command_exists dircolors
then
    DIRCOLORS=dircolors
elif command_exists gdircolors
then
    DIRCOLORS=gdircolors
else
    DIRCOLORS=true
fi
export LS_COLORS=$($DIRCOLORS -b $HOME/.dircolors | head -n 1 | sed "s/LS_COLORS='//;s/';//")

if command_exists atuin
then
    eval "$(atuin init zsh --disable-up-arrow)"
fi

ZSHRC_LOCAL=$HOME/.zshrc.local
if [ -f $ZSHRC_LOCAL ]
then
    source $ZSHRC_LOCAL
fi
