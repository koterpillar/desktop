HISTFILE=$HOME/.histfile
HISTSIZE=10000
SAVEHIST=10000
setopt share_history nomatch hist_ignore_all_dups hist_ignore_space
unsetopt autocd
WORDCHARS=${WORDCHARS//[\/-]}

DESKTOP_PATH=$(dirname $(dirname $(realpath ${(%):-%x})))

zstyle ':completion:*' matcher-list 'r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' menu yes select
setopt complete_in_word
autoload -Uz compinit
compinit -u
autoload -Uz bashcompinit
bashcompinit

bindkey -e

# X terminal keys
bindkey '^[[1;5D' vi-backward-word
bindkey '^[[1;5C' vi-forward-word
bindkey '^[OF' vi-end-of-line
bindkey '^[OH' vi-beginning-of-line
bindkey '^[[3~' delete-char
bindkey '^[[3;5~' delete-word

# Non-X terminal keys, where different
# bindkey '^[[D' vi-backward-word  # FIXME: this is normal left arrow on macOS
# bindkey '^[[C' vi-forward-word  # FIXME: this is normal right arrow on macOS
bindkey '^[[4~' vi-end-of-line
bindkey '^[[1~' vi-beginning-of-line

# macOS terminal keys, where different
bindkey '^[^[[D' vi-backward-word
bindkey '^[^[[C' vi-forward-word
bindkey '^[[H' beginning-of-line  # FIXME: same on X?
bindkey '^[[F' end-of-line  # FIXME: same on X?

# Edit the command line with Ctrl-V
autoload edit-command-line
zle -N edit-command-line
bindkey '^V' edit-command-line

bindkey '^I' expand-or-complete-prefix

# Handy and pretty aliases
command_exists() {
    type "$1" >/dev/null 2>&1
}

alias grep='grep --color=auto'

if command_exists exa
then
    alias ls=exa
elif command_exists gls
then
    alias ls='gls --color=auto'
else
    alias ls='ls --color=auto'
fi

if ! command_exists open
then
    alias open=xdg-open
fi

if command_exists bat
then
    alias cat=bat
fi

if command_exists unrar-free
then
    alias unrar=unrar-free
fi

# Colored man pages
# https://wiki.archlinux.org/title/Color_output_in_console#man
# https://man.archlinux.org/man/less.1#D
# https://felipec.wordpress.com/2021/06/05/adventures-with-man-color/
export MANPAGER="less -R --use-color --color=d+c --color=u+b"
export MANROFFOPT="-c"

# Plugins

source "${HOME}/.zi/bin/zi.zsh"
autoload -Uz _zi
(( ${+_comps} )) && _comps[zi]=_zi

# Plugins
zi light zsh-users/zsh-syntax-highlighting

# Disable oh-my-zsh autoupdate, rely on ZI
DISABLE_AUTO_UPDATE=true
zi snippet OMZ::lib/git.zsh
zi snippet OMZ::lib/termsupport.zsh
zi snippet OMZ::plugins/docker/_docker
zi snippet OMZ::plugins/git/git.plugin.zsh
zi snippet OMZ::plugins/gradle/gradle.plugin.zsh
zi snippet OMZ::plugins/npm/npm.plugin.zsh

zi load agkozak/zsh-z

zi load zsh-users/zsh-autosuggestions

zi load popstas/zsh-command-time

autoload -U add-zsh-hook
load-version-managers() {
    if [ -d $HOME/.nvm ] && \
        ([ -f .nvmrc ] || [ -f package.json ]); then
        if [ -z "$NVM_LOADED" ]; then
            source "$HOME/.nvm/nvm.sh"
            NVM_LOADED=1
        fi
        if [ -f .nvmrc ]; then
            nvm use
        fi
    fi

    if command_exists jenv && \
        ([ -f .java-version ] || [ -f build.gradle ] || [ -f build.gradle.kts ]); then
        if [ -z "$JENV_LOADED" ]; then
            eval "$(jenv init -)"
            JENV_LOADED=1
        fi
    fi
}
add-zsh-hook chpwd load-version-managers
load-version-managers

if [ -d "$HOME/.pyenv" ]
then
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
fi

# Theme
autoload -U colors
colors

if [ $UID = 0 ]
then
    PROMPT_HOST_COLOR=$fg[red]
else
    PROMPT_HOST_COLOR=$fg[green]
fi

load_image_resource () {
    index=$1
    resource=$2

    builtin printf "\e_Gi=$index,f=100,a=t,q=1,t=f;$(echo -n "$DESKTOP_PATH/resources/$resource" | base64)\e\\"
}

print_image () {
    index=$1
    width=$2
    builtin printf "\e_Ga=p,i=$index,q=1,c=$width,r=1\e\\"
}

if [ $HOST = taohua ]
then
    PROMPT_HOST=桃花
elif [ $HOST = liushu ]
then
    PROMPT_HOST=💽柳树
elif [[ $HOST =~ atlassian ]]
then
    if [[ ${TERM:-} = xterm-kitty ]]
    then
        load_image_resource 140 atlassian.png
        PROMPT_HOST=$(print_image 140 2)
    else
        PROMPT_HOST=▲
        if [ $UID != 0 ]
        then
            # https://atlassian.design/foundations/color
            PROMPT_HOST_COLOR=$'\e[38;2;0;82;204m'
        fi
    fi
else
    PROMPT_HOST=$HOST
fi

PROMPT_BACKGROUND=%{$'\e[48;2;251;240;255m'%}
if [[ ${TERM:-} = xterm-kitty ]]
then
    load_image_resource 141 arrow.png
    PROMPT_ARROW=$(print_image 141 1)
else
    PROMPT_ARROW=%{$'\e[38;2;251;240;255m'%}$'\UE0B0'%{$reset_color%}
fi
PROMPT_RESET=%{$reset_color%}$PROMPT_BACKGROUND

setopt PROMPT_SUBST
PROMPT='\
$PROMPT_BACKGROUND%{$PROMPT_HOST_COLOR%}$PROMPT_HOST$PROMPT_RESET \
$PROMPT_PWD \
$(git_prompt_info)\
%{$fg[red]%}%(!.#.»)%{$reset_color%}\
$PROMPT_ARROW'

PROMPT2='$PROMPT_BACKGROUND%{$fg[red]%}\%{$reset_color%} '

if [ -z "$SSH_CLIENT" ] && [ -z "$SSH_TTY" ] && [ $UID != 0 ]
then
    TERM_TITLE_IDLE=""
else
    TERM_TITLE_IDLE="$PROMPT_HOST"
    if [ $UID = 0 ]
    then
        TERM_TITLE_IDLE="${TERM_TITLE_IDLE}# "
    else
        TERM_TITLE_IDLE="${TERM_TITLE_IDLE}: "
    fi
fi

DIAMOND='♦'
DIR_DECORATIONS=("$HOME/projects" "$DIAMOND" "$HOME/Projects" "$DIAMOND" "$HOME/Downloads" '⤓' "$HOME" '~')

desktop_func_join() {
    if [ -z "$1" ]
    then
        echo "$2"
    elif [ -z "$2" ]
    then
        echo "$1"
    else
        echo "$1${3:- }$2"
    fi
}

ellipsis='…'
desktop_func_ellipsis() {
    maxlength=$(($2 - ${#ellipsis}))
    if [ "${#1}" -gt "$maxlength" ]
    then
        echo "${1[0,$maxlength]}$ellipsis"
    else
        echo "$1"
    fi
}

pwd_precmd() {
    PWD_SYMBOL=''
    PWD_DIR=$PWD
    for (( i = 1; i <= $#DIR_DECORATIONS; i += 2 )) do
        THIS_DIR=$DIR_DECORATIONS[i]
        THIS_SYM=$DIR_DECORATIONS[$((i + 1))]
        case $PWD in
            ($THIS_DIR)
                PWD_SYMBOL=$THIS_SYM
                PWD_DIR=''
                break
                ;;
            ($THIS_DIR/*)
                PWD_SYMBOL=$THIS_SYM
                PWD_DIR="${PWD#$THIS_DIR/}"
                break
                ;;
        esac
    done
    PROMPT_PWD=$(desktop_func_join "$PWD_SYMBOL" "$PWD_DIR")
    TITLE_DIR=$(desktop_func_ellipsis "$PWD_DIR" 25)
    TITLE_PWD=$(desktop_func_join "$PWD_SYMBOL" "$TITLE_DIR")
    title "${TERM_TITLE_IDLE}${TITLE_PWD}"
}
precmd_functions+=(pwd_precmd)

ZSH_RECORD_EXIT_STATUS=
exit_status_preexec() {
  ZSH_RECORD_EXIT_STATUS=1
}
exit_status_precmd() {
  _EXIT_STATUS_PRECMD="$?"
  if [ -n "${ZSH_RECORD_EXIT_STATUS:-}" ]
  then
    ZSH_RECORD_EXIT_STATUS=
    if [ "$_EXIT_STATUS_PRECMD" -gt 0 ]; then
      echo "$fg[red]❌ ${_EXIT_STATUS_PRECMD}${reset_color}"
    fi
  fi
}
preexec_functions+=(exit_status_preexec)
precmd_functions+=(exit_status_precmd)

zsh_command_time() {
    if [ -n "$ZSH_COMMAND_TIME" ]; then
        min=$(($ZSH_COMMAND_TIME/60))
        sec=$(($ZSH_COMMAND_TIME%60))
        if [ "$min" -lt 60 ]; then
            timer_show=$(printf '%02d:%02d\n' $min $sec)
        else
            hours=$(($min/60))
            min=$(($min%60))
            timer_show=$(printf '%d:%02d:%02d\n' $hours $min $sec)
        fi
        echo "$fg[cyan]⌛ $timer_show$reset_color"
    fi
}
ZSH_COMMAND_TIME_EXCLUDE=(vim nvim)

ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg[green]%}±%{$fg[yellow]%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="$PROMPT_RESET "
ZSH_CUSTOM_GIT_PROMPT_STAGED=%{$fg[green]%}✦
ZSH_CUSTOM_GIT_PROMPT_UNSTAGED=%{$fg[red]%}✧
ZSH_CUSTOM_GIT_PROMPT_UNTRACKED=%{$fg[yellow]%}✧

function parse_git_dirty() {
  local STATUS
  local STAGED
  local UNSTAGED
  local UNTRACKED
  STAGED=
  UNSTAGED=
  UNTRACKED=
  # https://git-scm.com/docs/git-status#_porcelain_format_version_2
  # https://unix.stackexchange.com/a/29748/11020
  for STATUS ("${(@f)$(__git_prompt_git status --porcelain=v2 2>/dev/null)}")
  do
    if [[ "$STATUS" =~ '^\?' ]]; then
      UNTRACKED=1
    else
      if [[ "$STATUS" =~ '^. [^.].' ]]; then
        STAGED=1
      fi
      if [[ "$STATUS" =~ '^. .[^.]' ]]; then
        UNSTAGED=1
      fi
    fi
  done
  if [ -n "$STAGED$UNSTAGED$UNTRACKED" ]
  then
    echo "${STAGED:+$ZSH_CUSTOM_GIT_PROMPT_STAGED}${UNSTAGED:+$ZSH_CUSTOM_GIT_PROMPT_UNSTAGED}${UNTRACKED:+$ZSH_CUSTOM_GIT_PROMPT_UNTRACKED}$PROMPT_RESET"
  fi
}

if command_exists dircolors
then
    DIRCOLORS=dircolors
elif command_exists gdircolors
then
    DIRCOLORS=gdircolors
else
    DIRCOLORS=true
fi
export LS_COLORS=$($DIRCOLORS -b $HOME/.dircolors | head -n 1 | sed "s/LS_COLORS='//;s/';//")

if command_exists atuin
then
    eval "$(atuin init zsh --disable-up-arrow)"
fi

# global /etc/zshprofile overrides $PATH
# oh-my-zsh overrides $PAGER
source $HOME/.zshenv

ZSHRC_LOCAL=$HOME/.zshrc.local
if [ -f $ZSHRC_LOCAL ]
then
    source $ZSHRC_LOCAL
fi
