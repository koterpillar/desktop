#!/bin/bash -e

: ${COMPUTER_USER:=alex}
: ${COMPUTER_LOCALE:=ru_RU}
: ${DISK:=/dev/sda}

GEOIP_INFO=$(curl -s https://geoip.nekudo.com/api)
# No jq available on live ISO, only Perl
function jq {
    echo "$1" | perl -e "
use JSON::PP;
my \$data = do { local \$/; <STDIN> };
\$data = decode_json(\$data);
for my \$selector (split /\\./, '$2') {
    \$data = \$data->{\$selector};
}
print \$data;
"
}
COUNTRY=$(jq "$GEOIP_INFO" country.code)
COMPUTER_TIMEZONE=$(jq "$GEOIP_INFO" location.time_zone)

if [ -z $COMPUTER_NAME ]
then
    echo "Specify COMPUTER_NAME; optionally COMPUTER_LOCALE, COMPUTER_USER, DISK or UPDATE" >&2
    exit 1
fi

# Update the system clock
timedatectl set-ntp true

# Partitioning
if [ -z $UPDATE ] && ! (mount | grep -q /mnt)
then
    (
        # New partition table
        echo o; echo Y;
        # /boot
        echo n; echo; echo; echo '+200M'; echo 'ef00';
        # /
        echo n; echo; echo; echo; echo 'e801';
        # Write out
        echo w; echo Y;
    ) | gdisk $DISK
fi
BOOTPART=${DISK}1
CRYPTPART=${DISK}2

for obj in /mnt/boot /mnt
do
    umount $obj >/dev/null 2>&1 || true
done
cryptsetup luksClose cryptroot >/dev/null 2>&1 || true

if [ -z $UPDATE ]
then
    echo "Setting the root filesystem password"
    cryptsetup --batch-mode luksFormat $CRYPTPART
fi

cryptsetup open $CRYPTPART cryptroot
ROOTPART=/dev/mapper/cryptroot

# Format the partitions
mkfs -t vfat $BOOTPART
if [ -z $UPDATE ]
then
    mkfs -t ext4 $ROOTPART
fi

# Mount the partitions
mount $ROOTPART /mnt
mkdir -p /mnt/boot
mount $BOOTPART /mnt/boot

# Mirrors
curl -s "https://www.archlinux.org/mirrorlist/?country=$COUNTRY&protocol=http&ip_version=4" | \
    sed 's/#Server/Server/g' > /etc/pacman.d/mirrorlist

CHROOT="arch-chroot /mnt"
CHROOT_INSTALL="$CHROOT pacman -S --noconfirm"

if [ -z $UPDATE ]
then
    # Base packages
    pacstrap /mnt base
else
    cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist
    # Reinstall due to overwritten /boot
    $CHROOT pacman -Sy
    $CHROOT_INSTALL linux
fi

# Configure the system
if [ -z $UPDATE ]
then
    genfstab -p /mnt >> /mnt/etc/fstab
fi

echo $COMPUTER_NAME > /mnt/etc/hostname

$CHROOT ln -sf /usr/share/zoneinfo/$COMPUTER_TIMEZONE /etc/localtime

echo "en_US.UTF-8 UTF-8" > /mnt/etc/locale.gen
echo "$COMPUTER_LOCALE.UTF-8 UTF-8" >> /mnt/etc/locale.gen
$CHROOT locale-gen
echo "LANG=$COMPUTER_LOCALE.UTF-8" > /mnt/etc/locale.conf

cat > /mnt/etc/mkinitcpio.conf <<EOF
MODULES=()
BINARIES=()
FILES=()
HOOKS=(base systemd autodetect modconf block sd-encrypt filesystems keyboard fsck)
EOF
$CHROOT mkinitcpio -p linux

# Boot loader
$CHROOT_INSTALL intel-ucode
CRYPT_UUID=$(blkid -s UUID -o value $CRYPTPART)
BOOT_OPTIONS="cryptdevice=UUID=${CRYPT_UUID}:cryptroot root=/dev/mapper/cryptroot rw quiet"
if [ -d /sys/firmware/efi ]
then
    mkdir -p /mnt/boot/loader/entries
    cat > /mnt/boot/loader/entries/arch.conf <<EOF
title Arch Linux
linux /vmlinuz-linux
initrd /intel-ucode.img
initrd /initramfs-linux.img
options $BOOT_OPTIONS
EOF
    $CHROOT bootctl --path=/boot install
else
    $CHROOT_INSTALL syslinux
    mkdir -p /mnt/boot/syslinux
    cp /mnt/usr/lib/syslinux/bios/*.c32 /mnt/boot/syslinux
    $CHROOT extlinux --install /boot/syslinux
    sgdisk $DISK --attributes=1:set:2
    $CHROOT dd bs=440 conv=notrunc count=1 if=/usr/lib/syslinux/bios/gptmbr.bin of=$DISK
    cat > /mnt/boot/syslinux/syslinux.cfg <<EOF
PROMPT 0
DEFAULT Arch

LABEL Arch
    LINUX ../vmlinuz-linux
    APPEND $BOOT_OPTIONS
    INITRD ../initramfs-linux.img,../intel-ucode.img
EOF
fi

# User management
$CHROOT groupadd --system sudo 2>&1 || true
$CHROOT_INSTALL --needed sudo
if [ -z $UPDATE ]
then
    echo '%sudo ALL=(ALL) ALL' > /mnt/etc/sudoers.d/sudo-group

    $CHROOT useradd --create-home --groups sudo $COMPUTER_USER
fi

$CHROOT passwd -l root

echo "Setting the new system user password."
$CHROOT passwd $COMPUTER_USER

# Prepare the system for the install script

# arch-chroot doesn't give the user a tty to prompt for password, disable it
# temporarily
sed -i 's/ ALL$/NOPASSWD: ALL/' /mnt/etc/sudoers.d/sudo-group
trap 'sed -i "s/NOPASSWD: //" /mnt/etc/sudoers.d/sudo-group' exit

AS_USER="$CHROOT sudo -u $COMPUTER_USER -i"
USER_HOME=/home/$COMPUTER_USER

$CHROOT_INSTALL --needed git networkmanager sudo
$CHROOT update-ca-trust
$AS_USER mkdir -p $USER_HOME/projects
$AS_USER git clone https://github.com/koterpillar/desktop.git $USER_HOME/projects/desktop
$AS_USER $USER_HOME/projects/desktop/install
